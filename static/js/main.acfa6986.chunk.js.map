{"version":3,"sources":["components/Footer/Footer.module.scss","components/Todo/TodoItem/TodoItem.module.scss","components/Todo/TodoInput/TodoInput.module.scss","App.module.scss","components/Title/Title.module.scss","components/Todo/TodoList/TodoList.module.scss","components/Title/Title.tsx","context/todoContext.ts","components/Todo/TodoInput/TodoInput.tsx","components/Todo/TodoItem/TodoItem.tsx","components/Todo/TodoList/TodoList.tsx","components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","footer","itemCount","filterBtn","clearCompleted","border","hide","filters","todoItem","toggleCheckbox","completed","destroy","item","editInput","inputWrapper","toggleAllCheckbox","toggled","todoInput","wrapper","todoApp","title","todoList","Title","react_default","a","createElement","className","styles","todoContext","createContext","useTodoContext","useContext","TodoProvider","Provider","TodoConsumer","Consumer","TodoInput","state","content","renderWithContext","context","_this","_ref","todos","actions","isAllToggled","every","todo","isCompleted","htmlFor","type","id","onChange","event","checked","target","toggleAll","value","placeholder","setState","onKeyUp","key","addTodo","this","React","Component","TodoItem","_useState","useState","_useState2","Object","slicedToArray","isEdit","setIsEdit","_useState3","_useState4","setContent","_editInputRef","useRef","useEffect","current","focus","ref","_ref2","nativeEvent","KeyboardEvent","updateTodo","Fragment","concat","toggleTodo","onDoubleClick","onClick","deleteTodo","TodoList","items","filter","getFilteredTodos","map","Todo_TodoItem_TodoItem","Footer","_useTodoContext","_useTodoContext$state","itemsCount","length","hasCompleted","some","filterButtonClass","onFilterHandler","setFilter","react","App","setTodos","newTodo","Date","now","prevState","toConsumableArray","objectSpread","prev","completing","components_Title_Title","Todo_TodoInput_TodoInput","Todo_TodoList_TodoList","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acfa6986.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__7dIj9\",\"itemCount\":\"Footer_itemCount__3yHW_\",\"filterBtn\":\"Footer_filterBtn__332rP\",\"clearCompleted\":\"Footer_clearCompleted__iAHES\",\"border\":\"Footer_border__3KPTK\",\"hide\":\"Footer_hide__2QCAf\",\"filters\":\"Footer_filters__2YGQS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoItem\":\"TodoItem_todoItem__LfLzL\",\"toggleCheckbox\":\"TodoItem_toggleCheckbox__1E9Be\",\"completed\":\"TodoItem_completed__2a3ah\",\"destroy\":\"TodoItem_destroy__1V5j8\",\"item\":\"TodoItem_item__3ctkS\",\"editInput\":\"TodoItem_editInput__2SkG8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"TodoInput_inputWrapper__3-Ebv\",\"toggleAllCheckbox\":\"TodoInput_toggleAllCheckbox__qOLG0\",\"toggled\":\"TodoInput_toggled__A0ZKp\",\"todoInput\":\"TodoInput_todoInput__J-Ce2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__RCHjb\",\"todoApp\":\"App_todoApp__2dWfO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__1jPs1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList\":\"TodoList_todoList__3ZumL\"};","import React from 'react';\nimport styles from './Title.module.scss';\n\nconst Title: React.FC = () => {\n  return (\n    <h1 className={ styles.title }>todos</h1>\n  );\n};\n\nexport default Title;\n","import { createContext, useContext } from 'react';\nimport { FilterType, Todo } from '../store/reducers/todos/todoReducer';\n\nexport type TodoContextState = {\n  todos: Todo[];\n  filter: FilterType;\n};\n\nexport type TodoContextActions = {\n  addTodo: (content: string) => void;\n  updateTodo: (id: number, content: string) => void;\n  deleteTodo: (id: number) => void;\n  toggleTodo: (id: number) => void;\n  toggleAll: (completing: boolean) => void;\n  clearCompleted: () => void;\n  setFilter: (type: FilterType) => void;\n};\n\nexport type TodoContext = {\n  state: TodoContextState;\n  actions: TodoContextActions;\n}\n\nconst todoContext = createContext<TodoContext | null>(null);\n\nexport const useTodoContext = () => useContext(todoContext) as TodoContext;\n\nexport const TodoProvider = todoContext.Provider;\nexport const TodoConsumer = todoContext.Consumer;\n\n/**\n *\n * addTodo: (content: string) => action(ADD_TODO, { content }),\n updateTodo: (id: number, content: string) => action(UPDATE_TODO, { id, content }),\n deleteTodo: (id: number) => action(DELETE_TODO, { id }),\n toggleTodo: (id: number) => action(TOGGLE_TODO, { id }),\n toggleAll: (completing: boolean) => action(TOGGLE_ALL, { completing }),\n clearCompleted: () => action(CLEAR_COMPLETED),\n setFilter: (type: FilterType) => action(SET_FILTER, { type })\n */\n","import React from 'react';\nimport { TodoConsumer, TodoContext } from '../../../context/todoContext';\nimport styles from './TodoInput.module.scss';\n\ntype State = {\n  content: string;\n};\n\nclass TodoInput extends React.Component<{}, State> {\n\n  state = {\n    content: ''\n  };\n\n  private renderWithContext = (context: TodoContext | null) => {\n    const { content } = this.state;\n    const { state: { todos }, actions } = context as TodoContext;\n    const isAllToggled = todos.every(todo => todo.isCompleted);\n\n    const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const { checked } = event.target;\n      actions.toggleAll(checked);\n    };\n\n    const onEnterKeyUpHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const { key } = event;\n      const { content } = this.state;\n      if (key !== 'Enter' || content === '' || !content) {\n        return;\n      }\n\n      actions.addTodo(content);\n      this.setState({ content: '' });\n    };\n\n    const onInputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const { value } = event.target;\n      this.setState({ content: value });\n    };\n\n    return (\n      <div className={ styles.inputWrapper }>\n        <label htmlFor={ 'toggleAll' } className={ isAllToggled ? styles.toggled : '' }>\n          <input type='checkbox'\n                 id={ 'toggleAll' }\n                 className={ styles.toggleAllCheckbox }\n                 onChange={ onChangeHandler }/>\n        </label>\n        <input className={ styles.todoInput }\n               value={ content }\n               placeholder={ 'What needs to be done?' }\n               onChange={ onInputChangeHandler } onKeyUp={ onEnterKeyUpHandler }/>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <TodoConsumer>\n        { this.renderWithContext }\n      </TodoConsumer>\n    );\n  }\n}\n\nexport default TodoInput;\n","import React, { useRef, useState, useEffect } from 'react';\nimport { useTodoContext } from '../../../context/todoContext';\nimport { Todo } from '../../../store/reducers/todos/todoReducer';\nimport styles from './TodoItem.module.scss';\n\ntype Props = {\n\titem: Todo;\n};\n\nconst TodoItem: React.FC<Props> = ({ item }) => {\n\tconst { actions } = useTodoContext();\n\tconst [isEdit, setIsEdit] = useState(false);\n\tconst [content, setContent] = useState(item.content);\n\tconst _editInputRef = useRef<HTMLInputElement>(null);\n\n\tuseEffect(() => {\n\t\tif (isEdit && _editInputRef.current) {\n\t\t\t(_editInputRef.current as HTMLInputElement).focus();\n\t\t}\n\t}, [isEdit]);\n\n\tconst onSubmit = (id: number) => (\n\t\tevent: React.KeyboardEvent<HTMLInputElement> | React.FocusEvent<HTMLInputElement>\n\t) => {\n\t\tconst key = event.nativeEvent instanceof KeyboardEvent ? event.nativeEvent.key : '';\n\t\tif ((key !== 'Enter' && key !== 'Escape' && key !== '') || content === '' || !content) {\n\t\t\treturn;\n\t\t}\n\n\t\tactions.updateTodo(id, content);\n\t\tsetIsEdit(false);\n\t};\n\n\tconst onItemDoubleClickHandler = () => {\n\t\tsetIsEdit(!item.isCompleted);\n\t};\n\n\treturn (\n\t\t<li className={styles.todoItem}>\n\t\t\t{isEdit ? (\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tref={_editInputRef}\n\t\t\t\t\tvalue={content}\n\t\t\t\t\tonChange={({ target }) => setContent(target.value)}\n\t\t\t\t\tonKeyUp={onSubmit(item.id)}\n\t\t\t\t\tclassName={styles.editInput}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<label htmlFor={`toggle_${item.id}`} className={item.isCompleted ? styles.completed : ''}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tid={`toggle_${item.id}`}\n\t\t\t\t\t\t\tclassName={styles.toggleCheckbox}\n\t\t\t\t\t\t\tonChange={() => actions.toggleTodo(item.id)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<span className={styles.item} onDoubleClick={onItemDoubleClickHandler}>\n\t\t\t\t\t\t{item.content}\n\t\t\t\t\t</span>\n\t\t\t\t\t<button className={styles.destroy} type={'button'} onClick={() => actions.deleteTodo(item.id)} />\n\t\t\t\t</>\n\t\t\t)}\n\t\t</li>\n\t);\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport { TodoContextState, useTodoContext } from '../../../context/todoContext';\nimport TodoItem from '../TodoItem/TodoItem';\nimport styles from './TodoList.module.scss';\n\nconst getFilteredTodos = ({ todos, filter }: TodoContextState) => {\n  return todos.filter(todo => {\n    return filter === 'completed'\n      ? todo.isCompleted\n      : filter === 'active'\n        ? !todo.isCompleted\n        : filter === 'all';\n  });\n};\n\nconst TodoList: React.FC = () => {\n  const { state } = useTodoContext();\n  const items = getFilteredTodos(state);\n\n  return (\n    <ul className={ styles.todoList }>\n      { items.map(item => <TodoItem item={ item } key={ item.id }/>) }\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import * as React from 'react';\nimport { useTodoContext } from '../../context/todoContext';\nimport { FilterType } from '../../store/reducers/todos/todoReducer';\nimport styles from './Footer.module.scss';\n\nconst Footer: React.FC = () => {\n  const { state: { todos, filter }, actions } = useTodoContext();\n\n  const itemsCount = todos.filter(todo => !todo.isCompleted).length;\n  const hasCompleted = todos.some(todo => todo.isCompleted);\n\n  const filterButtonClass = (type: FilterType) => {\n    return type === filter ? `${ styles.filterBtn } ${ styles.border }` : styles.filterBtn;\n  };\n\n  const onFilterHandler = (type: FilterType) => () => {\n    actions.setFilter(type);\n  };\n\n  return (\n    <footer className={ styles.footer }>\n      <span className={ styles.itemCount }>{ itemsCount } items left</span>\n      <div className={ styles.filters }>\n        <button className={ filterButtonClass('all') }\n                type={ 'button' }\n                onClick={ onFilterHandler('all') }>All\n        </button>\n        <button className={ filterButtonClass('active') }\n                type={ 'button' }\n                onClick={ onFilterHandler('active') }>Active\n        </button>\n        <button className={ filterButtonClass('completed') }\n                type={ 'button' }\n                onClick={ onFilterHandler('completed') }>\n          Completed\n        </button>\n      </div>\n      <div className={ styles.filters }>\n        <button className={ `${ styles.clearCompleted } ${ hasCompleted ? '' : styles.hide }` }\n                type={ 'button' }\n                onClick={ actions.clearCompleted }>\n          Clear Completed\n        </button>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport styles from './App.module.scss';\nimport Title from './components/Title/Title';\nimport TodoInput from './components/Todo/TodoInput/TodoInput';\nimport TodoList from './components/Todo/TodoList/TodoList';\nimport Footer from './components/Footer/Footer';\nimport { TodoContextActions, TodoContextState, TodoProvider } from './context/todoContext';\nimport { FilterType, Todo } from './store/reducers/todos/todoReducer';\n\ntype State = TodoContextState;\n\nconst App: React.FC = () => {\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filter, setFilter] = useState<FilterType>('all');\n\n  const actions: TodoContextActions = {\n    addTodo: content => {\n      const newTodo: Todo = {\n        isCompleted: false,\n        id: Date.now(),\n        content\n      };\n      setTodos(prevState => [...prevState, newTodo]);\n    },\n    updateTodo: (id, content) => {\n      setTodos(todos.map(todo => todo.id === id ? { ...todo, content } : { ...todo }));\n    },\n    deleteTodo: id => {\n      setTodos(prev => prev.filter(todo => todo.id !== id));\n    },\n    toggleTodo: id => {\n      setTodos(prev => prev.map(todo => todo.id === id\n        ? { ...todo, isCompleted: !todo.isCompleted }\n        : { ...todo }));\n    },\n    toggleAll: completing => {\n      setTodos(prev => prev.map(todo => ({ ...todo, isCompleted: completing })));\n    },\n    clearCompleted: () => {\n      setTodos(prev => prev.filter(todo => !todo.isCompleted));\n    },\n    setFilter\n  };\n\n  return (\n    <TodoProvider value={ { state: { todos, filter }, actions } }>\n      <div className={ styles.wrapper }>\n        <Title/>\n        <div className={ styles.todoApp }>\n          <TodoInput/>\n          <TodoList/>\n          <Footer/>\n        </div>\n      </div>\n    </TodoProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n  <App/>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}